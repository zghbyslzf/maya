[tasks.update-cargo-version]
command = "powershell"
args = [
  "-Command",
  "$content = Get-Content 'Cargo.toml' -Raw -Encoding UTF8; $packageSection = [regex]::Match($content, '\\[package\\](.|\\n)*?(?=\\[)').Value; if(!$packageSection) { $packageSection = [regex]::Match($content, '\\[package\\](.|\\n)*').Value; }; $versionMatch = [regex]::Match($packageSection, 'version\\s*=\\s*\"(\\d+)\\.(\\d+)\\.(\\d+)\"'); if ($versionMatch.Success) { $major = $versionMatch.Groups[1].Value; $minor = $versionMatch.Groups[2].Value; $patch = [int]$versionMatch.Groups[3].Value + 1; $oldVersionStr = $versionMatch.Value; $newVersionStr = $oldVersionStr -replace '\"(\\d+)\\.(\\d+)\\.(\\d+)\"', ('\"' + $major + '.' + $minor + '.' + $patch + '\"'); $content = $content.Replace($oldVersionStr, $newVersionStr); $content | Out-File -FilePath 'Cargo.toml' -Encoding UTF8; Write-Host \"版本号已从 $major.$minor.$($patch-1) 更新到 $major.$minor.$patch\"; }"
]
workspace = false
cwd = "."

[tasks.build]
dependencies = ["update-cargo-version"]
command = "cargo"
args = ["build", "--release"]
workspace = false # 关键修复：禁止在 workspace 成员中执行此任务
cwd = "." # 确保命令在根目录执行

[tasks.pkg]
dependencies = ["build"]
command = "cmd"
args = ["/c", "if not exist pkg mkdir pkg"]
workspace = false
cwd = "."

[tasks.move-release]
dependencies = ["pkg"]
command = "powershell"
args = [
  "-Command",
  "if (Test-Path pkg/release) { Remove-Item -Recurse -Force pkg/release }; New-Item -ItemType Directory -Force -Path pkg/release; if (Test-Path target/release/maya.exe) { Copy-Item target/release/maya.exe pkg/release/ } else { Write-Error \"maya.exe not found in target/release\" }"
]
workspace = false
cwd = "."

[tasks.update-version]
dependencies = ["move-release"]
command = "powershell"
args = [
  "-Command",
  "$pkgJson = Get-Content 'pkg/package.json' | ConvertFrom-Json; $version = [version]$pkgJson.version; $pkgJson.version = \"$($version.Major).$($version.Minor).$($version.Build + 1)\"; $pkgJson | ConvertTo-Json -Depth 100 | ForEach-Object { $_ -replace '    ', '  ' } | Set-Content 'pkg/package.json'"
]
workspace = false
cwd = "."


[tasks.npm-publish]
dependencies = ["update-version"]
command = "npm.cmd"
args = ["publish", "--registry=https://registry.npmjs.org"]
workspace = false
cwd = "pkg"

[tasks.publish-all]
dependencies = ["npm-publish"]
command = "powershell"
args = ["-Command", "Write-Host 'Publish completed!'"]
workspace = false
cwd = "."

[tasks.build-push]
command = "powershell"
args = ["-Command", "Write-Host 'Build and WASM bindgen completed!'"]
dependencies = ["build", "move-release", "update-version", "npm-publish", "publish-all"]
workspace = false
cwd = "."



