use std::fs;
use std::io;
use std::path::Path;

/// 清除 node_modules 目录
pub fn clear_node_modules<P: AsRef<Path>>(dir: P) -> io::Result<usize> {
    let mut count = 0;
    clear_node_modules_in_dir(dir.as_ref(), &mut count)?;
    Ok(count)
}

fn clear_node_modules_in_dir(dir: &Path, count: &mut usize) -> io::Result<()> {
    if !dir.is_dir() {
        return Ok(());
    }

    for entry in fs::read_dir(dir)? {
        let entry = entry?;
        let path = entry.path();

        if path.is_dir() {
            if path
                .file_name()
                .map_or(false, |name| name == "node_modules")
            {
                fs::remove_dir_all(&path)?;
                *count += 1;
                println!("已删除: {}", path.display());
            } else {
                clear_node_modules_in_dir(&path, count)?;
            }
        }
    }
    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::fs::{create_dir, File};
    use tempfile::tempdir;

    #[test]
    fn test_clear_node_modules() {
        let temp_dir = tempdir().unwrap();
        let node_modules_path = temp_dir.path().join("node_modules");
        create_dir(&node_modules_path).unwrap();
        let file_path = node_modules_path.join("test.js");
        File::create(&file_path).unwrap();
        assert!(node_modules_path.exists());
        let count = clear_node_modules(temp_dir.path()).unwrap();
        assert_eq!(count, 1);
        assert!(!node_modules_path.exists());
    }
}
